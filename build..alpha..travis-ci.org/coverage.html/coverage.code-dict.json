{"/home/travis/build/npmtest/node-npmtest-flex-combo/test.js":"/* istanbul instrument in package npmtest_flex_combo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flex-combo/lib.npmtest_flex_combo.js":"/* istanbul instrument in package npmtest_flex_combo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_flex_combo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_flex_combo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-flex-combo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-flex-combo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_flex_combo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_flex_combo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_flex_combo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_flex_combo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_flex_combo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_flex_combo.__dirname + '/lib.npmtest_flex_combo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-flex-combo/node_modules/flex-combo/index.js":"\"use strict\";\n\n/**\n * 主入口\n * 通过require(\"flex-combo\")\n * */\nconst pathLib = require(\"path\");\nconst trace = require(\"plug-trace\");\nconst DAC = require(\"dac\");\nconst FlexCombo = require(\"./flexcombo\");\nconst pkg = require(__dirname + \"/package.json\");\n\nlet init_config = function(dir) {\n  if (typeof dir == \"string\" && dir) {\n    let confFile, json = pkg.name + \".json\";\n    if (pathLib.isAbsolute(dir)) {\n      if (/\\.json$/.test(dir)) {\n        confFile = dir;\n      }\n      else {\n        confFile = pathLib.join(dir, json);\n      }\n    }\n    else {\n      confFile = pathLib.join(process.cwd(), dir, json);\n    }\n\n    return confFile;\n  }\n  else {\n    return '';\n  }\n};\n\nlet init_param = function (param) {\n  if (typeof param == \"object\" && param) {\n    let rootdir = param.rootdir || \"src\";\n    if (rootdir.indexOf('/') == 0 || /^\\w{1}:[\\\\/].*$/.test(rootdir)) {\n      param.rootdir = rootdir;\n    }\n    else {\n      param.rootdir = pathLib.normalize(pathLib.join(process.cwd(), rootdir));\n    }\n\n    return param;\n  }\n  else {\n    return {};\n  }\n};\n\nFlexCombo.addEngine(\"\\\\.tpl$|\\\\.tpl\\\\.js$|\\\\.html\\\\.js$\", DAC.tpl, \"dac/tpl\");\nFlexCombo.addEngine(\"\\\\.swig$|\\\\.swig\\\\.js$\", DAC.swig, \"dac/tpl\");\nFlexCombo.addEngine(\"\\\\.less\\\\.js$\", DAC.lessjs, \"dac/lessjs\");\nFlexCombo.addEngine(\"\\\\.less$|\\\\.less\\\\.css$\", DAC.less, \"dac/less\");\nFlexCombo.addEngine(\"\\\\.less\\\\.html$\", DAC.lesspolymer, \"dac/polymer\");\nFlexCombo.addEngine(\"\\\\.js$\", DAC.babel, \"dac/babel\");\nFlexCombo.addEngine(\"\\\\.js$\", DAC.xmd, \"dac/xmd\");\n\nmodule.exports = function (input_param, dir) {\n  process.on(pkg.name, function (data) {\n    console.log(\"\\n=== Served by %s ===\", trace.chalk.white(pkg.name));\n    trace(data);\n  });\n\n  let param = init_param(input_param);\n  let confFile = init_config(dir);\n\n  return function (req, res, next) {\n    try {\n      if (req && res && next) {\n        let fcInst = new FlexCombo(param, confFile);\n        fcInst.handle(req, res, next);\n      }\n      else {\n        console.log(\"arguments error!\");\n      }\n    }\n    catch (e) {\n      console.log(e);\n    }\n  }\n};\n\nmodule.exports.koa = function (ctx, param, cb) {\n  let fcInst = new FlexCombo(param);\n  fcInst.koa(ctx.req, function (e, body, header) {\n    if (e) {\n      cb(e);\n    }\n    else {\n      ctx.set(header);\n      cb(null, body);\n    }\n  });\n};\n\nmodule.exports.gulp = module.exports.engine = function (input_param, dir) {\n  let through = require(\"through2\");\n\n  let param = init_param(input_param);\n  let confFile = init_config(dir);\n\n  process\n    .removeAllListeners(pkg.name)\n    .on(pkg.name, function (data) {\n      trace(data, \"error\");\n    });\n\n  return through.obj(function (file, enc, cb) {\n    let fcInst = new FlexCombo(param, confFile);\n\n    let self = this;\n\n    if (file.isNull()) {\n      self.emit(\"error\", \"isNull\");\n      cb(null, file);\n      return;\n    }\n\n    if (file.isStream()) {\n      self.emit(\"error\", \"Streaming not supported\");\n      cb(null, file);\n      return;\n    }\n\n    fcInst.stream(file.path, function (buff) {\n      if (buff) {\n        file.contents = buff;\n      }\n      self.push(file);\n      cb();\n    });\n  });\n};\nmodule.exports.API = FlexCombo;\n","/home/travis/build/npmtest/node-npmtest-flex-combo/node_modules/flex-combo/flexcombo.js":"\"use strict\";\n\nconst pathLib = require(\"path\");\nconst urlLib  = require(\"url\");\nconst fsLib   = require(\"fs-extra\");\nconst merge   = require(\"merge\");\nconst mime    = require(\"mime\");\nconst async   = require(\"async\");\nconst fetch   = require(\"fetch-agent\");\nconst Stack   = require(\"plug-trace\").stack;\nconst Helper  = require(\"./lib/util\");\n\n// 默认注册编译引擎\nlet Engines = new Map();\n\nclass FlexCombo {\n  constructor(priority, confFile) {\n    // URL分析结果\n    this.parseDetail = {};\n\n    // 动态注册引擎\n    this.engines = new Map();\n\n    // trace信息\n    this.trace = null;\n\n    // 配置相关\n    this.priority = priority; // 代码显示注入的配置项,优先级最高\n    this.confFile = confFile; // 配置文件地址\n\n    if (confFile) {\n      if (!fsLib.existsSync(confFile)) {\n        fsLib.outputJson(confFile, require(\"./lib/param\"), {encoding: \"utf-8\"}, function () {\n          fsLib.chmod(confFile, 0o777);\n        });\n      }\n\n      this.cacheDir = pathLib.join(pathLib.dirname(confFile), \"../.cache\");\n    }\n    if (!this.cacheDir) {\n      this.cacheDir = pathLib.normalize(pathLib.join(process.cwd(), \".cache\"));\n    }\n    this.cacheDir = pathLib.join(this.cacheDir, \"flex-combo\");\n    if (!fsLib.existsSync(this.cacheDir)) {\n      fsLib.mkdirs(this.cacheDir, function (e, dir) {\n        dir && fsLib.chmod(dir, 0o777);\n        fsLib.chmod(this.cacheDir, 0o777);\n      }.bind(this));\n    }\n  }\n\n  get param() {\n    let confJSON = {};\n    try {\n      if (this.confFile) {\n        confJSON = require(this.confFile);\n        delete require.cache[this.confFile];\n      }\n    }\n    catch (e) {\n      this.trace && this.trace.error(\"Can't require config file!\", \"IO\");\n      confJSON = {};\n    }\n\n    return merge.recursive(true, require(\"./lib/param\"), confJSON, this.priority, {hosts: confJSON.hosts || {}});\n  }\n\n  static addEngine(rule, engine, field) {\n    if (!Engines.has(engine)) {\n      Engines.set(engine, {\n        rule: rule,\n        field: field\n      });\n    }\n  }\n\n  addCustomEngine(rule, engine, field) {\n    if (!this.engines.has(engine)) {\n      this.engines.set(engine, {\n        rule: rule,\n        field: field\n      });\n    }\n  }\n\n  resetCustomEngine() {\n    this.engines.clear();\n    let tmp = [];\n\n    let engines = this.param.engine;\n    for (let regStr in engines) {\n      let filepath = engines[regStr].replace(/\\.js$/, '');\n      let mod      = pathLib.join(process.cwd(), filepath);\n      if (tmp.indexOf(mod) == -1 && fsLib.existsSync(mod + \".js\")) {\n        tmp.push(mod);\n        this.addCustomEngine(regStr, require(mod), filepath);\n        delete require.cache[mod];\n      }\n    }\n  }\n\n  parse(origin) {\n    let _url    = origin.replace(/([^\\?])\\?[^\\?].*$/, \"$1\").replace(/[\\?\\,]{1,}$/, '');\n    let result  = urlLib.parse(_url);\n    result.path = result.path.replace(/[\\\\|\\/]{1,}/g, '/');\n\n    this.parseDetail = {\n      url: origin,\n      href: result.protocol + \"//\" + result.host + result.path,\n      protocol: result.protocol,\n      host: result.hostname,\n      port: result.port || (result.protocol == \"https:\" ? 443 : 80),\n      path: result.path,\n      list: []\n    };\n\n    let url    = this.parseDetail.path;\n    let prefix = url.indexOf(this.param.servlet + '?');\n\n    if (prefix != -1) {\n      let base              = (url.slice(0, prefix) + '/').replace(/\\/{1,}/g, '/');\n      let file              = url.slice(prefix + this.param.servlet.length + 1);\n      let filelist          = file.split(this.param.seperator, 1000);\n      this.parseDetail.list = filelist.map(function (i) {\n        return urlLib.resolve(base, i);\n      });\n    }\n    else {\n      this.parseDetail.list = [url];\n    }\n  }\n\n  isText(_url) {\n    return /text|javascript|json/i.test(mime.lookup(_url));\n  }\n\n  convert(buff, _url) {\n    if (this.isText(_url)) {\n      let outputCharset = (this.param.charset || \"utf-8\").toLowerCase();\n      if (this.param.urlBasedCharset && _url && this.param.urlBasedCharset[_url]) {\n        outputCharset = this.param.urlBasedCharset[_url];\n      }\n\n      return Helper.getBuffer(buff, outputCharset);\n    }\n    return buff;\n  }\n\n  getFilteredUrl(_url, filter) {\n    let regx, ori_url;\n\n    for (let k in filter) {\n      regx = new RegExp(k);\n      if (regx.test(_url)) {\n        ori_url = _url;\n        _url    = _url.replace(regx, filter[k]);\n        this.trace && this.trace.filter(regx, ori_url, _url);\n      }\n    }\n    return _url;\n  }\n\n  getRealPath(_url) {\n    let map = this.param.urls;\n    // 根目录设置\n    if (!map['/']) {\n      map['/'] = this.param.rootdir || \"src\";\n    }\n\n    _url = this.getFilteredUrl(_url, this.param[\"dac/local\"].filter);\n    _url = (/^\\//.test(_url) ? '' : '/') + _url;\n\n    // urls中key对应的实际目录\n    let repPath = process.cwd(), revPath = _url, longestMatchNum = 0;\n    for (let k in map) {\n      if (_url.indexOf(k) == 0 && longestMatchNum < k.length) {\n        longestMatchNum = k.length;\n        repPath         = map[k];\n        revPath         = _url.slice(longestMatchNum);\n      }\n    }\n    let _path = pathLib.normalize(pathLib.join(repPath, revPath));\n    return pathLib.isAbsolute(_path) ? _path : pathLib.join(process.cwd(), _path);\n  }\n\n  getCacheFilePath(_url) {\n    if (this.cacheDir) {\n      return pathLib.join(this.cacheDir, Helper.MD5(pathLib.join(this.parseDetail.host, _url)));\n    }\n    else {\n      return '';\n    }\n  }\n\n  cacheFile(absPath, buff) {\n    if (absPath && !/[<>\\*\\?]+/g.test(absPath)) {\n      fsLib.writeFile(absPath, buff, function (e) {\n        if (!e) {\n          fsLib.chmod(absPath, 0o777);\n        }\n      });\n    }\n  }\n\n  buildRequestOption(url, force) {\n    let reqHostName = this.parseDetail.host;\n    let reqHostIP   = this.param.hosts[reqHostName];\n    if (force || reqHostIP) {\n      let requestOption = {\n        protocol: this.parseDetail.protocol,\n        host: reqHostIP || reqHostName,\n        path: encodeURI(url),\n        method: \"GET\",\n        rejectUnauthorized: false,\n        headers: {\n          \"x-broker\": \"flex-combo\",\n          host: reqHostName\n        }\n      };\n\n      requestOption.headers = merge.recursive(true, this.param.headers, requestOption.headers);\n      return requestOption;\n    }\n    else {\n      return false;\n    }\n  }\n\n  _matchEngine(filteredURL, absPath, fakeReqOpt, isNotFirst, engine, info) {\n    if (new RegExp(info.rule).test(filteredURL)) {\n      let self  = this;\n      let param = this.param[info.field] || {};\n      let trace = function (e, isPass) {\n        if (!isPass) {\n          if (e) {\n            if (e.code != -1) {\n              self.trace && self.trace.error(absPath, info.field);\n            }\n          }\n          else {\n            self.trace && self.trace.engine(info.field, absPath);\n          }\n        }\n      };\n\n      if (isNotFirst) {\n        return function (content, callback) {\n          engine(\n            {content: content}, filteredURL, fakeReqOpt, param,\n            function (e, result, isPass) {\n              trace(e, isPass);\n              callback(e, result);\n            }\n          );\n        }\n      }\n      else {\n        return function (callback) {\n          engine(\n            absPath, filteredURL, fakeReqOpt, param,\n            function (e, result, isPass) {\n              trace(e, isPass);\n              callback(e, result);\n            }\n          );\n        }\n      }\n    }\n    else {\n      return false;\n    }\n  }\n\n  engineHandler(pathInfo, cb) {\n    let filteredURL = pathInfo.filtered;\n    let absPath     = pathInfo.abs;\n    let fakeReqOpt  = this.buildRequestOption(pathInfo.base, true);\n\n    if (fsLib.existsSync(absPath)) {\n      this.trace && this.trace.local(filteredURL, absPath);\n    }\n\n    let Q = [];\n    for (let item of this.engines) {\n      let engine = this._matchEngine(filteredURL, absPath, fakeReqOpt, Q.length, item[0], item[1]);\n      if (engine) {\n        Q.push(engine);\n      }\n    }\n    for (let item of Engines) {\n      let engine = this._matchEngine(filteredURL, absPath, fakeReqOpt, Q.length, item[0], item[1]);\n      if (engine) {\n        Q.push(engine);\n      }\n    }\n\n    if (Q.length) {\n      async.waterfall(Q, function (e, result) {\n        if (e) {\n          cb(e);\n        }\n        else {\n          cb(null, this.convert(result, pathInfo.base));\n        }\n      }.bind(this));\n    }\n    else {\n      cb(true);\n    }\n  }\n\n  staticHandler(pathInfo, cb) {\n    let absPath = pathInfo.abs;\n    let self    = this;\n\n    fsLib.readFile(absPath, function (e, data) {\n      if (e) {\n        self.trace && self.trace.warn(absPath, \"Not in Local\");\n        cb(e);\n      }\n      else {\n        cb(null, self.convert(data, pathInfo.base));\n      }\n    });\n  }\n\n  cacheHandler(pathInfo, cb) {\n    let cachePath = pathInfo.cache;\n    let self      = this;\n\n    if (this.param.cache) {\n      fsLib.readFile(cachePath, function (e, data) {\n        if (e) {\n          self.trace && self.trace.warn(pathInfo.href, \"Not in Cache\");\n        }\n        else {\n          self.trace && self.trace.cache(pathInfo.base, cachePath);\n        }\n\n        cb(e, data);\n      });\n    }\n    else {\n      cb(null, null);\n    }\n  }\n\n  fetchHandler(pathInfo, cb) {\n    let self      = this;\n    let remoteURL = pathInfo.href;\n    let reqOpt    = this.buildRequestOption(pathInfo.base);\n    if (reqOpt) {\n      fetch.request(reqOpt, function (e, buff, nsres) {\n        if (e) {\n          self.trace && self.trace.error(remoteURL, \"Network 500\");\n          cb(e);\n        }\n        else {\n          if (nsres.statusCode == 404) {\n            self.trace && self.trace.error(remoteURL, \"Network 404\");\n\n            cb(nsres);\n          }\n          else {\n            self.trace && self.trace.remote(pathInfo.href, reqOpt.host);\n\n            if (self.param.cache && pathInfo.cache) {\n              self.cacheFile(pathInfo.cache, buff);\n            }\n            cb(null, buff);\n          }\n        }\n      });\n    }\n    else {\n      self.trace && self.trace.error(remoteURL, \"Req Loop\");\n      cb({msg: \"Req Loop!\"});\n    }\n  }\n\n  task(url, callback) {\n    let filteredURL = this.getFilteredUrl(url, this.param.filter);\n    let pathInfo    = {\n      base: url,\n      filtered: filteredURL,\n      abs: this.getRealPath(filteredURL),\n      cache: this.getCacheFilePath(url),\n      href: this.parseDetail.protocol + \"//\" + this.parseDetail.host + ':' + this.parseDetail.port + url\n    };\n\n    let self      = this;\n    let step      = 0;\n    let taskQueue = [this.engineHandler, this.staticHandler, this.cacheHandler, this.fetchHandler];\n    async.doUntil(\n      function (cb) {\n        if (step < taskQueue.length) {\n          taskQueue[step++].bind(self)(pathInfo, function (e, data) {\n            if (e) {\n              cb(null, null);\n            }\n            else {\n              if (step === 1 && /\\.html\\.js$/.test(pathInfo.base)) {\n                fsLib.writeFile(pathInfo.abs, data, function () {\n                  fsLib.chmod(pathInfo.abs, \"0777\");\n                });\n              }\n              cb(null, data);\n            }\n          });\n        }\n        else {\n          cb({msg: \"Not Matched!\"});\n        }\n      },\n      function (isFin) {\n        return isFin !== null;\n      },\n      function (err, data) {\n        callback(err, data);\n      }\n    );\n  }\n\n  entry(callback) {\n    this.resetCustomEngine();\n\n    this.trace && this.trace.request(this.parseDetail.host, this.parseDetail.list);\n\n    let self = this;\n    let Q    = this.parseDetail.list.map(function (file) {\n      return function (cb) {\n        self.task(file, cb);\n      }\n    });\n    async.parallel(Q, function (e, result) {\n      if (e) {\n        self.trace && self.trace.fail(self.parseDetail.url);\n      }\n      else {\n        self.trace && self.trace.response(self.parseDetail.url, result);\n      }\n      callback(e, result);\n    });\n  }\n\n  stream(absPath, cb) {\n    let filtered = urlLib.resolve('/', pathLib.relative(this.param.rootdir, absPath));\n    this.engineHandler({\n      base: filtered,\n      filtered: filtered,\n      abs: absPath\n    }, function (e, data) {\n      cb(data);\n    });\n  }\n\n  response(req, cb) {\n    // 不用.pathname的原因是由于??combo形式的url，parse方法解析有问题\n    let URL = (req.connection.encrypted ? \"https\" : \"http\") + \"://\" +\n      (req.hostname || req.host || req.headers.host) + urlLib.parse(req.url).path;\n    this.parse(URL);\n    let absPath = this.getRealPath(this.getFilteredUrl(this.parseDetail.path, this.param.filter));\n\n    if (fsLib.existsSync(absPath) && fsLib.statSync(absPath).isDirectory()) {\n      req.url = urlLib.resolve('/', pathLib.relative(this.param.rootdir, absPath));\n      cb({msg: \"isDirectory\"});\n    }\n    else {\n      this.trace = new Stack(\"flex-combo\");\n\n      this.entry(function (e, result) {\n        if (e) {\n          cb(e);\n        }\n        else {\n          let content = Buffer.concat(result);\n          let header  = {\n            \"Access-Control-Allow-Origin\": '*',\n            \"Content-Length\": content.length,\n            \"X-MiddleWare\": \"flex-combo\"\n          };\n          let sample  = this.parseDetail.list[0];\n          if (sample) {\n            let val = mime.lookup(sample);\n            if (this.isText(sample)) {\n              val += \";charset=\" + this.param.charset;\n            }\n            header[\"Content-Type\"] = val;\n          }\n          cb(null, content, header);\n        }\n      }.bind(this));\n    }\n  }\n\n  handle(req, res, next) {\n    this.response(req, function (e, content, header) {\n      if (e) {\n        next();\n      }\n      else {\n        res.writeHead(200, header);\n        res.write(content);\n        res.end();\n      }\n    });\n  }\n\n  koa(req, cb) {\n    this.response(req, function (e, content, header) {\n      if (e) {\n        cb(e);\n      }\n      else {\n        cb(null, content, header);\n      }\n    });\n  }\n}\n\nmodule.exports = FlexCombo;","/home/travis/build/npmtest/node-npmtest-flex-combo/node_modules/flex-combo/lib/util.js":"\"use strict\";\n\nconst fsLib  = require(\"fs\");\nconst crypto = require(\"crypto\");\nconst util   = require(\"util\");\nconst DAC    = require(\"dac\");\nconst isUtf8 = DAC.isUtf8;\nconst iconv  = DAC.iconv;\n\nmodule.exports = {\n  /* 读取文件并返回Unicode编码的字符串，以便在Node.js环境下进行文本处理 */\n  getUnicode: function (filePath) {\n    if (fsLib.existsSync(filePath)) {\n      let buff = fsLib.readFileSync(filePath);\n      return isUtf8(buff) ? buff.toString() : iconv.decode(buff, \"gbk\");\n    }\n    else {\n      return null;\n    }\n  },\n\n  getBuffer: function (buff, outputCharset) {\n    if (!Buffer.isBuffer(buff)) {\n      buff = new Buffer(buff);\n    }\n\n    let selfCharset = isUtf8(buff) ? \"utf-8\" : \"gbk\";\n    if (selfCharset == outputCharset) {\n      return buff;\n    }\n    else {\n      return iconv.encode(iconv.decode(buff, selfCharset), outputCharset);\n    }\n  },\n\n  MD5: function (str) {\n    return crypto.createHash(\"md5\").update(str).digest(\"hex\");\n  },\n\n  unique: function (data) {\n    if (util.isArray(data)) {\n      return data.filter(function (elem, pos) {\n        return elem && data.indexOf(elem) == pos;\n      });\n    }\n    else {\n      return [];\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-flex-combo/node_modules/flex-combo/lib/param.js":"module.exports = {\n  urls: {},\n  filter: {},\n  charset: \"utf-8\",\n  urlBasedCharset: {},\n  hosts: {},\n  headers: {},\n  cache: true,\n  servlet: '?',\n  seperator: ',',\n  engine: {},\n  \"dac/local\" : {\n    filter: {}\n  },\n  \"dac/tpl\": {\n    compatible: false\n  },\n  \"dac/babel\": {\n    target: [],\n    options: {}\n  },\n  \"dac/polymer\" : {\n    filter: {},\n    ignore: []\n  },\n  \"dac/xmd\": {\n    anonymous: true,\n    filter: {},\n    cmd: [],\n    kmd: []\n  }\n};"}